<project name="GlobalSight" default="all" basedir=".">

	<!-- optional user-specified properties, eg gs.home -->
	<property file="user.build.properties" />
	<loadproperties srcFile="build.properties" />

    <tstamp />

	<target name="buildversion">
        <mkdir dir="${serverclassesDest}" />
		<!-- Create a BuildVersion.java which holds the current build version -->
        <loadfile property="buildversion.java"
                  srcFile="BuildVersion.java.template">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </loadfile>
        <echo file="BuildVersion.java" message="${buildversion.java}" />
        <copy todir="../../${envoySrcJava}/com/globalsight">
            <fileset dir="." includes="BuildVersion.java">
                <!-- Only copy the file when it changes. -->
                <different targetdir="../../${envoySrcJava}/com/globalsight"
                           ignoreFileTimes="true" />
            </fileset>
        </copy>
	</target>

	<target name="distdir">
		<mkdir dir="${dist}" />
	</target>

	<target name="compile" depends="buildversion">
		<echo message="***** compile *****" />
		<ant antfile="../../ling/build/build.xml" target="precompile">
			<property name="classpath" value="${classpath}" />
		</ant>
		<echo message="***** compile : javac task *****" />
		<javac nowarn="${nowarn}" encoding="ISO-8859-1" verbose="${javacverbose}" debug="on" target="${javactarget}" classpath="${classpath}" srcdir="../../${envoySrcJava}:../../${diplomatDevSrcJava}:../../${lingSrcJava}" destdir="${serverclassesDest}" includes="**/*.java" excludes="test/**/*.java, tools/**/*.java" fork="true" memoryMaximumSize="512m">
		</javac>
	</target>

    <!-- http://tomcat.apache.org/tomcat-5.5-doc/jasper-howto.html#Web_Application_Compilation -->

    <path id="jasper.classpath"> 
      <fileset dir="${jbossDefaultLibDir}"> 
        <include name="*.jar"/> 
      </fileset> 
      <fileset dir="${tomcatLibDir}"> 
        <include name="*.jar"/> 
      </fileset> 
      <pathelement location="${webapponlyJarLib}/standard.jar" />
      <pathelement location="${webapponlyJarLib}/jstl.jar" />
      <pathelement path="${classpath}"/>
    </path> 

    <target name="jspcompile" depends="compile, cap">
      <mkdir dir="jsp/generated"/>

      <taskdef classname="org.apache.jasper.JspC" name="jasper2" classpathref="jasper.classpath" />
      <!-- jasper2 takes paths relative to the current directory,
           not the basedir, so force it -->
      <jasper2 classpath="jasper.classpath" javaEncoding="UTF-8" validateXml="false" 
        uriroot="${basedir}/${globalsight_home}/globalsight-web.war" 
        webXmlFragment="${basedir}/jsp/webJSP.xml" 
        outputDir="${basedir}/jsp/generated" />

      <mkdir dir="jsp/classes"/>
      <javac nowarn="${nowarn}" verbose="${javacverbose}" encoding="UTF-8" debug="on" 
        target="${javactarget}" classpathref="jasper.classpath" srcdir="${basedir}/jsp/generated" 
        destdir="${basedir}/jsp/classes" fork="true" memoryMaximumSize="1024m" >
        <exclude name="org/apache/jsp/envoy/administration/config/teamsite/new1header_jsp.java" />
        <exclude name="org/apache/jsp/envoy/administration/config/teamsite/new2header_jsp.java" />
        <exclude name="org/apache/jsp/envoy/administration/cvsconfig/CVSRepositoryMain_jsp.java" />
      </javac>
      
	  <!-- 
	    Below command is like to generate a jar file which contains all compiled JSP files, 
	    and make it easier to deploy it to server
	  -->
	  <!--
	  <jar basedir="jsp/classes" jarfile="jsp/GlobalSight_JSP.jar"/>
	  -->
    </target>

	<target name="javadoc">
        <javadoc encoding="ISO-8859-1" destdir="apidoc">
            <packageset dir="../../${envoySrcJava}" />
            <packageset dir="../../${diplomatDevSrcJava}" />
            <packageset dir="../../${lingSrcJava}">
                <exclude name="test/**" />
                <exclude name="tools/**" />
            </packageset>
        </javadoc>
	</target>

        <target name="build-tests" depends="compile-tests, copy-test-files" />
        <target name="compile-tests" depends="compile">
            <mkdir dir="${testclasses}"/>
            <javac nowarn="${nowarn}" verbose="${javacverbose}" encoding="utf-8" debug="on" destdir="${testclasses}" classpath="${classpath}" source="1.6" target="1.6">
                <src path="${testSrc}" />
            </javac>
        </target>
        <target name="copy-test-files">
            <copy todir="${testclasses}">
                <fileset dir="${testSrc}">
                    <exclude name="**/*.java" />
                </fileset>
            </copy>
        </target>

        <target name="build-ling-tests" depends="compile-ling-tests, copy-ling-test-files" />
        <target name="compile-ling-tests" depends="compile">
            <mkdir dir="${testclasses}"/>
            <javac nowarn="${nowarn}" verbose="${javacverbose}" encoding="ISO-8859-1" debug="on" destdir="${testclasses}" classpath="${classpath}" source="1.6" target="1.6">
                <src path="../../${lingSrcJava}" />
                <include name="test/globalsight/**/*.java" />
            </javac>
        </target>
        <target name="copy-ling-test-files">
            <copy todir="${testclasses}">
                <fileset dir="../../${lingSrcJava}">
                    <include name="test/globalsight/**/*" />
                    <exclude name="**/*.java" />
                </fileset>
            </copy>
        </target>

        <target name="build-hibernate-tests" depends="compile-hibernate-tests" />
        <target name="compile-hibernate-tests" depends="compile">
            <mkdir dir="${testclasses}"/>
            <javac nowarn="${nowarn}" verbose="${javacverbose}" encoding="ISO-8859-1" debug="on" destdir="${testclasses}" classpath="${classpath}" source="1.6" target="1.6">
                <src path="../../envoy/hibernatetest/domain" />
                <src path="../../envoy/hibernatetest/service" />
            </javac>
        </target>

	<!-- Build the third party JAR files. They are empty JARs except for Manifest -->
	<target name="thirdPartyJars">
        <jar destfile="${globalsight_home}/lib/thirdParty1.jar" basedir="../lib" includes="README.txt" manifest="../lib/thirdParty1.mf" />
        <jar destfile="${globalsight_home}/lib/thirdParty2.jar" basedir="../lib" includes="README.txt" manifest="../lib/thirdParty2.mf" />
        <jar destfile="${globalsight_home}/lib/jbpmLibs.jar" basedir="../lib" includes="README.txt" manifest="../lib/jbpmLibs.mf" />
        <jar destfile="${globalsight_home}/lib/hibernateLibs.jar" basedir="../lib" includes="README.txt" manifest="../lib/hibernateLibs.mf" />
        <jar destfile="${globalsight_home}/lib/ssoLibs.jar" basedir="../lib" includes="README.txt" manifest="../lib/ssoLibs.mf" />
	</target>

	<target name="ling">
		<ant antfile="../../ling/build/build.xml" />
	</target>

	<target name="cap">
		<ant antfile="../../envoy/src/build.xml" />
	</target>

	<target name="cxe">
		<ant antfile="../../diplomat/build/build.xml" />
	</target>

	<target name="installer">
		<ant antfile="../install/build.xml" />
	</target>

	<target name="tsAutoImport" depends="compile">
        <copy todir="tsautoimport">
            <fileset dir="../teamsite/tsautoimport">
                <exclude name="properties/**" />
            </fileset>
        </copy>
        <copy todir="tsautoimport/lib" file="${commonJarLib}/log4j.jar" />
        <jar update="true" duplicate="preserve" filesonly="true" destfile="tsautoimport/lib/tsAutoImport.jar" basedir="${serverclassesDest}" includes="com/globalsight/cxe/message/MessageData.class,
            com/globalsight/diplomat/util/Logger.class,
            com/globalsight/log/GlobalSightCategory.class,
            com/globalsight/log/GlobalSightCategoryFactory.class,
            com/globalsight/log/GlobalSightPropertyConfigurator.class,
            com/globalsight/util/CollectionHelper.class,
            com/globalsight/util/file/DelimitedFileReader.class,
            com/globalsight/util/file/DirectoryMonitor.class,
            com/globalsight/util/file/FileWaiter.class,
            com/globalsight/util/file/FileModificationTimeSnapshot.class,
            com/globalsight/cxe/adapter/teamsite/autoimport/AutomaticImportMonitor.class,
            com/globalsight/cxe/adapter/teamsite/autoimport/AutomaticImporter.class,
            com/globalsight/cxe/adapter/teamsite/autoimport/AutomaticImportService.class,
            com/globalsight/cxe/adapter/teamsite/autoimport/AutomaticImportDaemon.class,
            com/globalsight/cxe/adapter/filesystem/autoImport/DirectoryMap.class,
            com/globalsight/cxe/adapter/filesystem/autoImport/DirectoryMapEntry.class,
            com/globalsight/cxe/adapter/filesystem/autoImport/DirectoryMapPrinter.class
                " />
	</target>

	<target name="tsAutoImportZip" depends="tsAutoImport, distdir">
		<ant antfile="zip.xml" target="TeamsiteAutoImport" />
	</target>

    <target name="copy">
        <copy todir="${globalsight_home}/cxe-ejb.jar/META-INF">
            <fileset dir="../../tools/lib">
                <include name="MANIFEST.MF" />
            </fileset>
            <fileset dir="../../diplomat/dev/src/java/com/globalsight/cxe/adaptermdb">
                <include name="*.xml" />
            </fileset>
        </copy>
        <copy todir="${globalsight_home}/META-INF">
            <fileset dir="${jbossUtilDir}">
                <include name="jboss-app.xml" />
            </fileset>
        </copy>
        <copy todir="${globalsight_home}/globalsight-web.war/WEB-INF">
            <fileset dir="${jbossUtilDir}">
                <include name="jboss-web.xml.template" />
            </fileset>
        </copy>
        <copy todir="${globalsight_home}/lib">
            <fileset dir="${commonJarLib}">
                <!-- Must not install our own log4j.jar: GBS-2171 -->
                <exclude name="log4j.jar" />
            </fileset>
            <fileset dir="${mysqlJarLib}" />
            <fileset dir="${apacheAxisJarLib}">
                <include name="axis.jar" />
            </fileset>
        </copy>
        <!-- Put the remaining optional Apache Axis jars in the axis sub directory -->
        <!-- so they can be omitted if needed depending on the app server -->
        <!-- Exclude the saaj.jar which goes into java/jre/lib/ext -->
        <copy todir="${globalsight_home}/lib/axis">
            <fileset dir="${apacheAxisJarLib}">
                <exclude name="axis.jar" />
                <exclude name="saaj.jar" />
            </fileset>
        </copy>
        <copy todir="${globalsight_home}/lib/jbpm">
            <fileset dir="${jbpmJarLib}" />
        </copy>
        <copy todir="${globalsight_home}/lib/sso">
            <fileset dir="${ssoJarLib}" />
        </copy>
        <copy todir="${globalsight_home}/lib/hibernate">
            <fileset dir="${hibernateJarLib}" />
        </copy>
        <copy todir="${globalsight_home}/globalsight-web.war/WEB-INF/lib">
            <fileset dir="${webapponlyJarLib}">
                <include name="*.jar" />
            </fileset>
        </copy>
    </target>

	<target name="all" depends="compile, ling, cap, cxe, copy, thirdPartyJars, AddSourceAppletJar" />

	<!-- Jar up all GlobalSight classes into globalsight.jar -->
	<target name="globalsight.jar" depends="compile">
		<echo message="**** Creating globalsight.jar ****" />
		<jar update="true" duplicate="preserve" filesonly="true" destfile="${globalsight_home}/lib/globalsight.jar">
            <fileset dir="${serverclassesDest}" includes="**/*.class" />
		</jar>
	</target>

	<target name="zip" depends="all, globalsight.jar, SpellChecker, installer, distdir">
		<ant antfile="zip.xml" target="zip" />
	</target>

	<!-- Zip file for netegrity specific files -->
	<target name="netegrity" depends="distdir">
		<ant antfile="zip.xml" target="netegrity" />
	</target>

	<!-- Target to build the GS SpellChecker -->
	<target name="SpellChecker">
		<ant dir="${spellchecker}/" antfile="build.xml" target="build" inheritAll="false" />
	</target>

	<!-- Target to package all spell-checker files (not used) -->
	<target name="XdeSpellChecker" />

	<!-- Target to package all spell-checker dictionaries -->
	<target name="XdeSpellCheckerDictionaries">
		<echo message="**** Packaging all Spell-Checker Dictionaries ****" />

		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="arabic" />
			<param name="jars" value="arabic.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="chinese" />
			<param name="jars" value="chinese.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="czech" />
			<param name="jars" value="czech.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="danish" />
			<param name="jars" value="danish.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="dutch" />
			<param name="jars" value="dutch.jar,dutch2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="english_australian" />
			<param name="jars" value="australian.jar,ukenglish.jar,ukenglish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="english_canadian" />
			<param name="jars" value="canadian.jar,ukenglish.jar,ukenglish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="english_southafrican" />
			<param name="jars" value="africansouth.jar,ukenglish.jar,ukenglish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="english_uk" />
			<param name="jars" value="ukenglish.jar,ukenglish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="estonian" />
			<param name="jars" value="estonian.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="finnish" />
			<param name="jars" value="finnish.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="french" />
			<param name="jars" value="french.jar,french2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="french_canada" />
			<param name="jars" value="canadianfrench.jar,french.jar,french2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="greek" />
			<param name="jars" value="greek.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="german" />
			<param name="jars" value="german.jar,german2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="italian" />
			<param name="jars" value="italian.jar,italian2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="japanese" />
			<param name="jars" value="japaneseroman.jar,japanesesanscript.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="norwegian" />
			<param name="jars" value="norwegian.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="polish" />
			<param name="jars" value="polish.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="portuguese" />
			<param name="jars" value="portuguese.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="portuguese_brazil" />
			<param name="jars" value="brazilianportuguese.jar,portuguese.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="spanish" />
			<param name="jars" value="spanish.jar,spanish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="spanish_argentina" />
			<param name="jars" value="argentina.jar,spanish.jar,spanish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="spanish_bolivia" />
			<param name="jars" value="bolivian.jar,spanish.jar,spanish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="spanish_colombo" />
			<param name="jars" value="colombian.jar,spanish.jar,spanish2002.jar" />
		</antcall>
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="swedish" />
			<param name="jars" value="swedish.jar" />
		</antcall>

		<!-- Be nice to inhouse testers and pack all dicts in one zip -->
		<antcall target="XdeSpellCheckerDictionary">
			<param name="lang" value="ALL" />
			<param name="jars" value="*.jar" />
		</antcall>
	</target>

	<!-- Target to package one spell-checker dictionary -->
	<target name="XdeSpellCheckerDictionary">
		<echo message="**** ${lang}" />

		<mkdir dir="${dist}/scdict" />
		<zip duplicate="preserve" zipfile="${dist}/scdict/scdict_${lang}.zip">
			<zipfileset dir="../xdespellchecker/applications/xdespellchecker/WEB-INF/lib" prefix="${product}/${deployment}/globalsight.ear/xdespellchecker.war/WEB-INF/lib" includes="${jars}" />
		</zip>
	</target>

	<!-- Target for Desktop Icon in package-->
	<target name="DesktopIconZip" depends="DesktopIcon">
		<copy file="${desktopicon.dir}/build/DesktopIcon.zip" todir="${dist}" />
	</target>

	<!-- Target for webtop plug in package-->
	<target name="WebtopZip" depends="Webtop">
		<copy file="../../${diplomatDevSrcJava}/../webtop-plugin/dist/webtop-plug-in.zip" todir="${dist}" />
	</target>

	<target name="Webtop">
		<echo message="../../${diplomatDevSrcJava}/../webtop-plugin" />
		<ant dir="../../${diplomatDevSrcJava}/../webtop-plugin" antfile="build.xml" target="dist" inheritAll="false" />
	</target>

	<!-- Targets for linguistics tools -->
	<target name="LingTools" depends="Debex, GAlign" />
	<target name="LingToolsZip" depends="Debex, GAlign">
		<!--<copy file="${lingtools}/debex/dist/debex.zip" todir="${dist}" />-->
		<copy file="${lingtools}/galign/dist/galign-installer.zip" todir="${dist}" />
	</target>

	<target name="Debex">
		<ant dir="${lingtools}/debex" antfile="build.xml" target="dist" inheritAll="false" />
	</target>

	<target name="GAlign">
		<ant dir="${lingtools}/galign" antfile="build.xml" target="dist" inheritAll="false" />
	</target>

	<!-- Target to package Desktop Icon -->
	<target name="DesktopIcon">
		<ant dir="${desktopicon.dir}/tools" antfile="build.xml" target="make.package" />
	</target>
	
	<target name="AddSourceAppletJar">
		<ant dir="../../envoy/src/applet/AddSourceApplet" antfile="build.xml" target="all" />
	</target>

	<!-- Target to package all converters -->
	<target name="AllConverters" depends="PdfConverter,WordConverter,ExcelConverter,PowerPointConverter,WordXPConverter,ExcelXPConverter,PowerPointXPConverter">
		<echo message="**** Packaging all Converters ****" />
	</target>

	<target name="AllXPConverters" depends="WordXPConverter,ExcelXPConverter,PowerPointXPConverter">
		<echo message="**** Packaging all Office XP Converters ****" />
	</target>

	<target name="All2003Converters" depends="Word2003Converter,Excel2003Converter,PowerPoint2003Converter">
		<echo message="**** Packaging all Office 2003 Converters ****" />
	</target>

	<!-- GlobalSight Adobe Converter -->
	<target name="AdobeConverter" depends="distdir">
		<echo message="**** Packaging Adobe Converter ****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_adobe.zip">
			<zipfileset dir="../../diplomat\dev\src\c-sharp\AdobeConverter\AdobeConverter\AdobeConverter\bin\Release" prefix="AdobeConverter" includes="*.exe,*.dll,*.pdb" excludes="AdobeConverter.vshost.exe" />
		</zip>
	</target>

	<!-- GlobalSight PDF Converter Service -->
	<target name="PdfConverter" depends="distdir">
		<echo message="***** GlobalSight PDF Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_pdf.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/PdfConverter/PdfConverter/bin/Debug" prefix="globalsight/pdfconverter/bin" includes="PdfConverter.exe,*.dll" />
			<zipfileset dir="../../tools/dotnet" prefix="globalsight/pdfconverter/bin" includes="reg.exe" />
		</zip>
	</target>

	<!-- GlobalSight Word Converter Service -->
	<target name="WordConverter" depends="distdir">
		<echo message="***** GlobalSight Word Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_word.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2000/WordConverter/WordConverter/bin/Debug" prefix="globalsight/wordconverter/bin" includes="*.exe,*.dll" />
			<zipfileset dir="../../tools/dotnet" prefix="globalsight/wordconverter/bin" includes="reg.exe" />
		</zip>
	</target>

	<!-- GlobalSight Word XP Converter Service -->
	<target name="WordXPConverter" depends="distdir">
		<echo message="***** GlobalSight Word XP Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_wordxp.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/XP/WordXPConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- GlobalSight Word 2003 Converter Service -->
	<target name="Word2003Converter" depends="distdir">
		<echo message="***** GlobalSight Word 2003 Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_word2003.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2003/Word2003ConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>
	
	<!-- GlobalSight Office 2007 Converter -->
	<target name="Office2007Converter" depends="distdir">
		<echo message="**** Packaging Office 2007 Converter ****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_office2007.zip">
			<zipfileset dir="../../diplomat\dev\src\c-sharp\Office2007Converters\Office2007ConvertersSetup\Release" prefix="" includes="*.*" />
		</zip>
	</target>
	
	<!-- GlobalSight Office 2003 Converter -->
	<target name="Office2003Converter" depends="distdir">
		<echo message="**** Packaging Office 2003 Converter ****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_office2003.zip">
			<zipfileset dir="../../diplomat\dev\src\c-sharp\Office2003Converters\Office2003ConvertersSetup\Release" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- GlobalSight PPT Converter Service -->
	<target name="PowerPointConverter" depends="distdir">
		<echo message="***** GlobalSight PowerPoint Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_powerpoint.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2000/PowerPointConverter/PowerPointConverter/bin/Debug" prefix="globalsight/powerpointconverter/bin" includes="*.exe,*.dll" />
			<zipfileset dir="../../tools/dotnet" prefix="globalsight/powerpointconverter/bin" includes="reg.exe" />
		</zip>
	</target>

	<!-- GlobalSight PPT XP Converter Service -->
	<target name="PowerPointXPConverter" depends="distdir">
		<echo message="***** GlobalSight PowerPoint XP Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_powerpointxp.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/XP/PowerPointXPConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- GlobalSight PPT 2003 Converter Service -->
	<target name="PowerPoint2003Converter" depends="distdir">
		<echo message="***** GlobalSight PowerPoint 2003 Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_powerpoint2003.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2003/PowerPoint2003ConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- GlobalSight Excel Converter Service -->
	<target name="ExcelConverter" depends="distdir">
		<echo message="***** GlobalSight Excel Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_excel.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2000/ExcelConverter/ExcelConverter/bin/Debug" prefix="globalsight/excelconverter/bin" includes="*.exe,*.dll" />
			<zipfileset dir="../../tools/dotnet" prefix="globalsight/excelconverter/bin" includes="reg.exe" />
		</zip>
	</target>

	<!-- GlobalSight Excel XP Converter Service -->
	<target name="ExcelXPConverter" depends="distdir">
		<echo message="***** GlobalSight Excel XP Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_excelxp.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/XP/ExcelXPConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- GlobalSight Excel 2003 Converter Service -->
	<target name="Excel2003Converter" depends="distdir">
		<echo message="***** GlobalSight Excel 2003 Converter *****" />
		<zip duplicate="preserve" zipfile="${converterdist}/conv_excel2003.zip">
			<zipfileset dir="../../diplomat/dev/src/c-sharp/2003/Excel2003ConverterSetup/Debug" prefix="" includes="*.*" />
		</zip>
	</target>

	<!-- Web Service Clients (Java and C#) -->
	<!-- Both the C# and Java clients serve as examples of how one could -->
	<!-- write a web service client, so we package up everything including -->
	<!-- code, docs, libs, etc. -->
	<target name="WebServiceClients" depends="distdir,DesktopIcon">
		<echo message="***** GlobalSight Web Service Testers -- Java and C# clients *****" />
		<ant antfile="../../envoy/src/webserviceClients/java/build.xml" target="all" inheritAll="false" />

		<!-- Java Web Service Clients -->
		<zip zipfile="${dist}/${product}_${DSTAMP}_WebSvcClientJava.zip">
			<zipfileset dir="../../envoy/src/webserviceClients/java" prefix="${product}/webservices/javaClient" excludes="GS_README.txt" />
		</zip>
		<!-- C# client -->
		<zip zipfile="${dist}/${product}_${DSTAMP}_WebSvcClientC#.zip">
			<zipfileset dir="../../envoy/src/webserviceClients/c-sharp" prefix="${product}/webservices/cSharpClient" />
		</zip>
	</target>

	<!--     Build everything and make the zip file -->
        <!-- jspcompile is not necessary, but do it to catch errors-->
	<target name="dist" depends="jspcompile, zip, tsAutoImportZip, WebServiceClients, LingToolsZip, WebtopZip, DesktopIconZip">
	</target>

	<target name="distnojsp" depends="dist" />

	<target name="clean">
		<!--      Delete the classes and ${dist} directory trees      -->
		<ant antfile="../../ling/build/build.xml" target="clean" />
		<ant antfile="../install/build.xml" target="clean" />
		<ant dir="${lingtools}/debex" antfile="build.xml" target="clean" />
		<ant dir="${lingtools}/galign" antfile="build.xml" target="clean" />
		<ant dir="../../${diplomatDevSrcJava}/../webtop-plugin" antfile="build.xml" target="clean" inheritAll="false" />
		<ant antfile="../../envoy/src/webserviceClients/java/build.xml" target="clean" inheritAll="false" />
		<ant dir="../../envoy/src/applet/AddSourceApplet" antfile="build.xml" target="clean" />
        <ant dir="${spellchecker}" antfile="build.xml" target="clean" inheritAll="false" />
        <delete dir="${capclasses}" />
        <delete dir="${testclasses}" />
        <delete dir="jsp" />
        <delete dir="apidoc" />
        <delete dir="tsautoimport" />
		<delete dir="${dist}">
		</delete>
		<delete dir="${docdirectory}">
		</delete>
		<delete file="BuildVersion.java" />
        <delete file="../../${envoySrcJava}/com/globalsight/BuildVersion.java"/>
		<delete file="run.classpath.bat" />
		<delete file="run.classpath.sh" />
		<delete dir="com" />
		<delete file="graphicalWf.jar" />
		<delete file="customer.jar" />
		<delete file="dbProfile.jar" />
		<delete file="commons-httpclient-3.0-rc2.jar" />
        <delete dir="${testreports}" failonerror="false"/>
	</target>

    <!-- classpath for running GS code within the source tree.  Probably, we
         should separate the compile classpath from the run classpath. -->
    <path id="run.classpath">
        <!-- classpath property is really for compiling and doesn't have the
             right run-time load ordering. -->
        <pathelement location="${hibernateJarLib}/dom4j-1.6.1.jar" />
        <pathelement location="${commonJarLib}/jaxen-1.1-beta-4.jar" />
        <pathelement path="${classpath}"/>
        <!-- classpath property doesn't have this because it's not needed for
             compiling. -->
        <pathelement location="${mysqlJarLib}/mysql-connector-java-5.1.6-bin.jar" />
        <pathelement location="${testclasses}"/>
    	<pathelement location="${jbossLibDir}/endorsed/xalan.jar" />
    </path>

    <!-- classpath for running GS code within the source tree, referring to
         an install for generated properties.  The gs.home property is the
         globalsight.ear directory of the install, and can be set in
         user.build.properties.  Note it's up to you to make sure your
         install is in sync with the source. -->

    <path id="runwithinstall.classpath">
        <path refid="run.classpath" />
        <pathelement location="${gs.home}/lib/classes" />
    </path>

    <target name="write-run-classpath">
        <pathconvert property="runwithinstall.classpath" refid="runwithinstall.classpath" />
        <echo>Writing classpath to run.classpath.{bat,sh}</echo>
        <echo file="run.classpath.bat" message="set RUNCLASSPATH=${runwithinstall.classpath}" />
        <echo file="run.classpath.sh" message="RUNCLASSPATH=${runwithinstall.classpath}" />
    </target>

    <!-- Run all unittests (or just one if test property is set) -->
    <target name="test" depends="runtests" />
    <target name="runtests" depends="all, build-tests, just-runtests" />
    <!-- Shortcut that does not build the tests, so handy to save time, or
         to run only the test classes currently present. -->
    <target name="just-runtests">
        <mkdir dir="${testreports}"/>
        <mkdir dir="${testreports}/raw"/>
        <junit fork="yes" printsummary="yes" failureproperty="junit.failure">
        <!-- haltonfailure="yes"> -->
          <sysproperty key="test.idcs5.enable" value="${test.idcs5.enable}"/>
          <sysproperty key="test.idcs5.winfiles" value="${test.idcs5.winfiles}"/>
          <classpath refid="runwithinstall.classpath" />
          <batchtest unless="test" todir="${testreports}/raw">
            <fileset dir="${testclasses}">
              <include name="**/Test*.class" />
              <include name="**/*Test.class" />
              <exclude name="**/*$*" />  <!-- no inner clasess -->
            </fileset>
            <formatter type="xml"/>
          </batchtest>
          <test if="test" name="${test}" todir="${testreports}/raw">
            <formatter type="xml"/>
          </test>
        </junit>
        <junitreport todir="${testreports}">
          <fileset dir="${testreports}/raw"/>
          <report todir="${testreports}"/>
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
    </target>

	<!-- Sign the customer.jar for the applets -->
	<target name="signCustomerJar">
		<ant antfile="../../envoy/src/build.xml" target="sign_jars" />
	</target>
</project>

