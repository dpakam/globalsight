package com.globalsight.www.webservices;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.0.1
 * 2015-03-23T11:44:21.209+08:00
 * Generated source version: 3.0.1
 * 
 */
@WebServiceClient(name = "WebService4AEM", 
                  wsdlLocation = "http://10.10.215.103:8080/globalsight/aemServices/WebService4AEM?wsdl",
                  targetNamespace = "http://webservices.globalsight.com/") 
public class WebService4AEM_Service extends Service {

    public static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservices.globalsight.com/", "WebService4AEM");
    public final static QName WebService4AEMPort = new QName("http://webservices.globalsight.com/", "WebService4AEMPort");
//    static {
//        URL url = null;
//        try {
//            url = new URL("http://10.10.215.103:8080/globalsight/aemServices/WebService4AEM?wsdl");
//        } catch (MalformedURLException e) {
//            java.util.logging.Logger.getLogger(WebService4AEM_Service.class.getName())
//                .log(java.util.logging.Level.INFO, 
//                     "Can not initialize the default wsdl from {0}", "http://10.10.215.103:8080/globalsight/aemServices/WebService4AEM?wsdl");
//        }
//        WSDL_LOCATION = url;
//    }

    public WebService4AEM_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WebService4AEM_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WebService4AEM_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebService4AEM_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebService4AEM_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public WebService4AEM_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName);
    }    

    /**
     *
     * @return
     *     returns WebService4AEM
     */
    @WebEndpoint(name = "WebService4AEMPort")
    public WebService4AEM getWebService4AEMPort() {
        return super.getPort(WebService4AEMPort, WebService4AEM.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WebService4AEM
     */
    @WebEndpoint(name = "WebService4AEMPort")
    public WebService4AEM getWebService4AEMPort(WebServiceFeature... features) {
        return super.getPort(WebService4AEMPort, WebService4AEM.class, features);
    }

}
